name: Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    branches:
      - master
    types:
      - published

jobs:
  lint:
    name: Lint code using eslint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Install Node.js 10
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 10

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            ~/.cache/bower
            app/bower_components
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install project dependencies
        run: |
          npm ci

      - name: Run eslint
        run: |
          npm run lint

  build:
    name: Build frontend
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Install Node.js 10
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 10

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            ~/.cache/bower
            app/bower_components
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install project dependencies
        run: |
          npm ci && npx bower@1.8.8 install

      - name: Prepare build environment variables
        id: branch_info
        run: |
          branch_name=${GITHUB_REF##*/}
          short_sha=${GITHUB_SHA:0:7}
          echo "##[set-output name=branch_name;]${branch_name}"
          echo "##[set-output name=short_sha;]${short_sha}"

          if [ "$branch_name" = "master" || ${{ github.event_name == 'release' }} ]; then
            echo "OPENSENSEMAP_API_URL=https://api.opensensemap.org" >> $GITHUB_ENV
            echo "OPENSENSEMAP_MAPTILES_URL=${{ secrets.OPENSENSEMAP_MAPTILES_URL_PROD }}" >> $GITHUB_ENV
          else
            echo "OPENSENSEMAP_API_URL=https://api.testing.opensensemap.org" >> $GITHUB_ENV
            echo "OPENSENSEMAP_MAPTILES_URL=https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" >> $GITHUB_ENV
          fi

      - name: Build
        run: |
          npx grunt build --target=build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASS }}

      - name: Build container image and push to Docker Hub (not for PRs)
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name == 'push' }} || ${{ github.event_name == 'release' && github.event.action == 'published' }}
          tags: ${{ secrets.IMAGE_NAME }}:${{ steps.branch_info.outputs.branch_name }},${{ secrets.IMAGE_NAME }}:${{ steps.branch_info.outputs.branch_name }}-${{ steps.branch_info.outputs.short_sha }}
          context: ./
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
